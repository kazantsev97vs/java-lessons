
    Thread - поток

    Способы создания потоков:

    1)
        1   class MyThread extends Thread {
        2       public void run() {...}
        3   }
        4
        5   MyThread myThread = new MyThread();
        6   myThread.start();

    2)
        1   class Runner implements Runnable {
        2       public void run() {...}
        3   }
        4
        5   Thread thread = new Thread(new Runner());
        6   thread.start();

    Методы:

        run() - метод, который следует переопределить, для выполнения заданного кода в потоке

        start() - запускает поток

        Thread.sleep() - заставляет поток "лечь спать" - на какое-то время прекратить свое выполнение

    Ключевые слова:

        volatile - (изменчивый) гарантирует когерентность кэшей ядер.
                   (не дает кэшироваться в памяти ядра -> каждый поток будет обращаться к главной
                   памяти, чтобы взять свежее значение переменной)

                   Для того случая, когда одна переменная делится между несколькими потоками
                   и когда один поток пишет в одну переменную, а другой или более потоков -
                   читают из этой переменной тогда с помощью ключевого слова volatile
                   - мы можем настроить взаимодействие этих потоков

        synchronized - пишется в сигнатуре метода и говорит нам о том,
                       что тело метода может исполняться только одним потоком.
                       Т.е. только один поток в один момент времени может исполнять тело метода.
                       А все остальные потоки в это время ждут.
                       Поэтому в теле метода мы можем писать не атомарные операции, инструкции.
                       Поэтому, используя ключевое слово "synchronized", мы добиваемся синхронизованности потоков.

        Для синхронизации в JAVA нам необходим всегда объект, когда мы хотим синхронизовать два или более потоков,
        нам нужно использовать какй-то объект. Т.е. мы синхронизируемся всегда на объекте.
        Потому что в JAVA у объектов существует такая особенность, то что у каждого объекта существует МОНИТОР.
        И этот монитор в один момент времени м.б. только у одного потока - это такое ограничение языка программирования.
        И этот монитор неявным образом используется в ключевом слове "synchronized", т.е. в синхронизации потоков.

        Когда мы пишем "synchronized" вот таким вот образом:
                                                                public synchronized void increment() { counter++; }
        Не указывая ему объект, на котором мы хотим синхронизироваться,
         - мы синхронизируемся на объекте this (ссылка на созданный объект).

        Второй вариант синхронизации -- synchronized-блок:
                                        public void increment() {
                                                synchronized (this) {
                                                    counter++;
                                                }
                                            }
